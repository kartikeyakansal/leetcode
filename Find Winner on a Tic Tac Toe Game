class Solution {
public:
    string tictactoe(vector<vector<int>>& moves) {
        vector<vector<int>> grid(3, vector<int>(3, -1));
        
        for(int i = 0; i < moves.size(); i++){
            if(i%2 == 0){
                grid[moves[i][0]][moves[i][1]] = 1;
            }
            else{
                grid[moves[i][0]][moves[i][1]] = 0;             
            }
        }
        
        if(((grid[0][0] == grid[1][1]) && (grid[1][1] == grid[2][2])) || ((grid[0][2] == grid[1][1]) && (grid[1][1] == grid[2][0])) || ((grid[0][1] == grid[1][1]) && (grid[1][1] == grid[2][1])) || ((grid[1][0] == grid[1][1]) && (grid[1][1] == grid[1][2]))){
            if(grid[1][1] == 1){
                return "A";
            }
            else if (grid[1][1] == 0){
                return "B";
            } 
        }
        else if(((grid[0][0] == grid[0][1]) && (grid[0][1] == grid[0][2])) || ((grid[0][0] == grid[1][0]) && (grid[1][0] == grid[2][0]))){
            if(grid[0][0] == 1){
                return "A";
            }
            else if (grid[0][0] == 0){
                return "B";
            }
        }
        else if(((grid[2][0] == grid[2][1]) && (grid[2][1] == grid[2][2])) || ((grid[0][2] == grid[1][2]) && (grid[1][2] == grid[2][2]))){
            if(grid[2][2] == 1){
                return "A";
            }
            else if (grid[2][2] == 0){
                return "B";
            }
        }

        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                if(grid[i][j] == -1){
                    return "Pending";
                }
            }
        }
        return "Draw";
    }
};
